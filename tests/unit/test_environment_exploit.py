import unittest

from semver import VersionInfo

from environment.node import Node, PassiveService
from environment.network_elements import Session, Hop, Endpoint
from environment.exploit import Exploit, ExploitCategory, VulnerableService, ExploitLocality
from environment.exploit_store import ExploitStore


class TestExploit(unittest.TestCase):

    def test_0000_service_construction(self) -> None:
        vuln1 = VulnerableService("vuln1")

        self.assertEqual(vuln1.min_version, VersionInfo.parse("0.0.0"), "Empty version info")
        self.assertEqual(vuln1.max_version, VersionInfo.parse("0.0.0"), "Empty version info")

        with (self.assertRaises(Exception)):
            vuln2 = VulnerableService("vuln2", "1.2.3", "1.0.0")

    def test_0001_exploit_store(self) -> None:
        e1 = Exploit("e1", [VulnerableService("vuln1"), VulnerableService("vuln2")], ExploitLocality.LOCAL, ExploitCategory.AUTH_MANIPULATION)
        e2 = Exploit("e2", [VulnerableService("vuln1"), VulnerableService("vuln2")], ExploitLocality.LOCAL, ExploitCategory.DATA_MANIPULATION)
        e3 = Exploit("e3", [VulnerableService("vuln2")], ExploitLocality.REMOTE, ExploitCategory.AUTH_MANIPULATION)
        e4 = Exploit("e4", [VulnerableService("vuln3")], ExploitLocality.REMOTE, ExploitCategory.DATA_MANIPULATION)

        ExploitStore().add_exploit(e1, e2, e3, e4)

        self.assertEqual(ExploitStore().get_exploit("e3")[0].id, "e3")

        exploit_ids = [x.id for x in ExploitStore().get_exploit(service="vuln2")]
        self.assertEqual(set(exploit_ids), {"e1", "e2", "e3"})

        exploit_ids = [x.id for x in ExploitStore().get_exploit(service="vuln3")]
        self.assertEqual(set(exploit_ids), {"e4"})

        exploit_ids = [x.id for x in ExploitStore().get_exploit(category=ExploitCategory.DATA_MANIPULATION)]
        self.assertEqual(set(exploit_ids), {"e2", "e4"})

        exploit_ids = [x.id for x in ExploitStore().get_exploit(service="vuln1", category=ExploitCategory.AUTH_MANIPULATION)]
        self.assertEqual(set(exploit_ids), {"e1"})

        ExploitStore().clear()

    def test_0002_evaluation(self) -> None:
        service = PassiveService("http", owner="http", version="1.0.3")

        node1 = Node("node1")
        node2 = Node("node2")

        node1.add_service(service)
        node2.add_service(service)

        session = Session("attacker1", path=[Hop(Endpoint("attacker1", 0), Endpoint("node1", 0))])

        e1 = Exploit("e1", [VulnerableService("http", "1.0.1", "1.1.0")], ExploitLocality.LOCAL, ExploitCategory.DATA_MANIPULATION)
        e2 = Exploit("e2", [VulnerableService("ssh")], ExploitLocality.REMOTE, ExploitCategory.AUTH_MANIPULATION)
        e3 = Exploit("e3", [VulnerableService("http", "0.9.6", "0.9.8")], ExploitLocality.LOCAL, ExploitCategory.DATA_MANIPULATION)

        ExploitStore().add_exploit(e1, e2, e3)

        self.assertEqual(ExploitStore().evaluate("e99", "http", None, node1), (False, "Could not find exploit by id"))
        self.assertEqual(ExploitStore().evaluate("e1", "http", None, node1), (False, "Local exploits can only be used from within an existing session"))
        self.assertEqual(ExploitStore().evaluate("e1", "http", session, node2), (False, "Local exploits can only be used at session endpoint."))
        self.assertEqual(ExploitStore().evaluate("e1", "ssh", session, node1), (False, "Attempting to use exploit on a service it does not apply to"))
        self.assertEqual(ExploitStore().evaluate("e2", "ssh", session, node1), (False, "The exploit is not fit for any of the services on the node"))
        self.assertEqual(ExploitStore().evaluate("e3", "http", session, node1), (False, "The exploit is not applicable on the current version of a service"))
        self.assertEqual(ExploitStore().evaluate("e1", "http", session, node1), (True, ""))
