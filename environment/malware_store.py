from typing import Optional

# This will complain about unused imports, but it is very much used...
import attackers

from environment.node import ActiveService
from environment.environment import EnvironmentProxy
from utils.singleton import Singleton


class MalwareStore(metaclass=Singleton):
    def __init__(self):
        self._attackers = globals()["attackers"]

    def create_malware(self, name: str, id: str, type: Optional[str] = None, env: Optional[EnvironmentProxy] = None) -> Optional[ActiveService]:
        try:
            c = getattr(self._attackers, name)
            return c(id, type, env)
        except:
            return None
