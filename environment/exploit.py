from enum import Enum
from typing import List, Dict
from uuid import uuid4
from semver import VersionInfo


class ExploitCategory(Enum):
    NONE = 0,
    AUTH_MANIPULATION = 1,
    DATA_MANIPULATION = 2,
    CODE_EXECUTION = 4


class ExploitLocality(Enum):
    NONE = 0
    LOCAL = 1
    REMOTE = 2


class ExploitParameterType(Enum):
    NONE = 0,
    IDENTITY = 1,
    ADDRESS = 2,
    SERVICE = 3


class ExploitParameter:
    def __init__(self, exploit_type: ExploitParameterType, value: str = ""):
        self._type = exploit_type
        self._value = value

    @property
    def exploit_type(self) -> ExploitParameterType:
        return self._type

    @property
    def value(self) -> str:
        return self._value

    def set_value(self, value) -> None:
        self._value = value


class VulnerableService:
    def __init__(self, id: str, min_version: str = "0.0.0", max_version: str = "0.0.0"):
        self._id = id

        if max_version == "0.0.0":
            max_version = min_version

        self._min_ver = VersionInfo.parse(min_version)
        self._max_ver = VersionInfo.parse(max_version)

        if self._min_ver > self._max_ver:
            raise Exception("Version mismatch, minimal version larger than maximal")

    @property
    def id(self):
        return self._id

    @property
    def min_version(self):
        return self._min_ver

    @property
    def max_version(self):
        return self._max_ver


class Exploit:
    def __init__(self, id: str = "", services: List[VulnerableService] = None, locality:
                 ExploitLocality = ExploitLocality.NONE, category: ExploitCategory = ExploitCategory.NONE,
                 *parameters: ExploitParameter) -> None:
        if not id:
            self._id = str(uuid4())
        else:
            self._id = id

        self._services = {}
        if services:
            for service in services:
                self._services[service.id] = service

        self._locality = locality
        self._category = category

        if len(parameters) <= 1:
            self._parameters = parameters
        else:
            self._parameters = [*parameters]

    @property
    def id(self) -> str:
        return self._id

    @property
    def services(self) -> Dict[str, VulnerableService]:
        return self._services

    @property
    def locality(self) -> ExploitLocality:
        return self._locality

    @property
    def category(self) -> ExploitCategory:
        return self._category

    @property
    def parameters(self) -> List[ExploitParameter]:
        return self._parameters
