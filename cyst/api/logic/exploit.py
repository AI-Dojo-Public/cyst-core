from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum
from semver import VersionInfo
from typing import Dict, List


from cyst.api.utils.configuration import ConfigItem


class ExploitCategory(Enum):
    NONE = 0,
    AUTH_MANIPULATION = 1,
    DATA_MANIPULATION = 2,
    CODE_EXECUTION = 4


class ExploitLocality(Enum):
    NONE = 0
    LOCAL = 1
    REMOTE = 2


class ExploitParameterType(Enum):
    NONE = 0,
    IDENTITY = 1,
    ADDRESS = 2,
    SERVICE = 3,
    # These are expected immutable exploit parameters. I hope it won't explode...
    # IMPACT_IDENTITY: possible values ENUMERATED, ALL - successful exploitation will provide authorization for a selected few identities, or for all
    IMPACT_IDENTITY = 1001,
    # IMPACT_NODE: possible values ENUMERATED, ALL - successful exploitation will provide authorization for a selected few nodes, or for all
    IMPACT_NODE = 1002,
    # IMPACT_SERVICE: possible values ENUMERATED, ALL - successful exploitation will provide authorization for a selected few services, or for all
    IMPACT_SERVICE = 1003,
    # ENABLE_ELEVATED_ACCESS possible values TRUE, FALSE - exploit enables to get root access
    ENABLE_ELEVATED_ACCESS = 1004


@dataclass
class ExploitParameterConfig(ConfigItem):
    type: ExploitParameterType
    value: str
    immutable: bool


class ExploitParameter(ABC):
    @abstractmethod
    def __init__(self, exploit_type: ExploitParameterType, value: str = "", immutable: bool = False) -> None:
        pass

    @property
    @abstractmethod
    def type(self) -> ExploitParameterType:
        pass

    @property
    @abstractmethod
    def value(self) -> str:
        pass

    @abstractmethod
    def set_value(self, val: str) -> None:
        pass


@dataclass
class VulnerableServiceConfig(ConfigItem):
    # There is a discrepancy between config.name and vulnerableservice.id. This is because the id is internal to
    # config items and no configurable object should have an id that is not unique to scenario. These things should
    # be names, types or whatever
    name: str
    min_version: VersionInfo
    max_version: VersionInfo


class VulnerableService(ABC):

    @property
    @abstractmethod
    def id(self) -> str:
        pass

    @property
    @abstractmethod
    def min_version(self) -> VersionInfo:
        pass

    @property
    @abstractmethod
    def max_version(self) -> VersionInfo:
        pass


@dataclass
class ExploitConfig(ConfigItem):
    services: List[VulnerableServiceConfig, str]
    locality: ExploitLocality
    category: ExploitCategory
    parameters: Dict[ExploitParameterType, ExploitParameterConfig]


class Exploit(ABC):

    @property
    @abstractmethod
    def id(self) -> str:
        pass

    @property
    @abstractmethod
    def services(self) -> Dict[str, VulnerableService]:
        pass

    @property
    @abstractmethod
    def locality(self) -> ExploitLocality:
        pass

    @property
    @abstractmethod
    def category(self) -> ExploitCategory:
        pass

    @property
    @abstractmethod
    def parameters(self) -> Dict[ExploitParameterType, ExploitParameter]:
        pass
